

Method Overriding:
-----------------
method overriding is an Approach of re-implementing a parent classes method under the class exactly with the same name and signature

Method Hiding/Shadowing is also an approach of re-implementing a parent classes method under the child class exactly with the same name and signature

In the First case child class re-implements it's parent classes methods which are declared as virtual, where as in the second case child class can re-implement
any parent's method even if the method is not declared as virtual

We can re-implement a parent classes method under child class using 2 Approaches:
		1. Method Overriding
		2. Method Hiding/Shadowing

After re-implementing parent classes methods under child classes the child class interface will start calling the local methods only that is the re-implemented methods,
but if required in any case we can also call the parent classes methods from child classes by using 2 approaches

1) By creating the instance of parent class under child class we can can call parent's methods from child class.
2) By using the base keyword also we can call parents method from child class, but keywords like "this" and "base"
can not be used from the static blocks.

A Parent class reference even if created by using the child class instance can't access any members that are purely defined under the child class but can call
overridden members of the child class, because overridden members are not considered as pure child class members, but members which are re-implemented by using 
the approach of hiding are considered as pure child class members and not accessible to parents reference.


Method Overloading :
====================

it is an approach of defining a method with multiple behavior, where behaviors of the methods will be changing based on the parameters of that method.
That is input changes output changes(input means it can be either the number of values to pass to the method or type of values pass to the method or order
of values to the method).

				(or)
multiple methods can have the same name but differ in the number, type, or order of parameters. It allows a class to have more than one method with the same name 
but different signatures.

Example:1
=========
using System;

class Parent
{
    // Method 1: No parameters
    public void test()
    {
        Console.WriteLine("1st Method");
    }

    // Method 2: 
    public void Add(int a)
    {
        Console.WriteLine("2nd Method");
    }

    // Method 3: Two doubles
    public void Add(int a, string s)
    {
        Console.WriteLine("3rd Method");
    }

}

class Program
{
    static void Main()
    {
        parent p = new parent();

        p.test();                // 1st Method
        p.test(5);              // 2nd Method
        p.test(3, "Rk");        // 3rd Method
        
    }
}


example:2
----------
		string s = "Hello World"
		s.IndexOf('o')    	4// returns 1st occurance
		s.IndexOf('o', 5)	7// returns next occurance
		s.IndexOf("ll")		2

Method Overloading is a approach of defining multiple behaviours to a method and these behaviours will vary based on  the parameters of that method.

Example:
----------
string str = "Hello How are you"
str.SubString(14);      // you
str.SubString(10);	// are you
str.SubString(10, 3);	// are


Operator Overloading:
====================
Operator overloding is also an approach defining multiple behaviours to an operator and those behaviours will vary based on the operand types between 
which the operator is used. For Example "+" is an addition operator when used between 2 numeric operands and it is an concatenation operator when used 
between 2 string operands.

	Number + Number => Addition
	string + string => Concatenation




Abstract Classes and Abstract Methods:
========================================
A Method Without any Method body is known as an Abstract method. what the method contains is only declaration of the method

example:- public abstract void Add(int i, int j);

if a method is declared as abstract under any class then the child class of that class is responsible for implementing the method.

A class under which we define abstract methods is known as abstract class. An Abstract class contains both Non-abstract methods(Methods with method body)
and also abstract Methods(Methods with-out method body)

Note: To define a method or class as abstract we require to use the abstract keyword on them.

example:1

abstract class Class1
{
	public abstract void show();
}

class Class2 : Class1
{
	public override void show()  //mandatory
	{
	 - implementation	
	}
}



Example:2
---------
abstract class AbsParent
{
   public void Add(int x, int Y)
   {
	Console.WriteLine(x +  y)
   }
   public void Sub(int x, int y)
   {
	Console.WriteLine(x - y);
   }
   public abstract void Mul(int x, int y);
   public abstract void Div(int x, int y);
}

public class child : AbsParent
{
	public override void Mul(int x, int y)
	{
	  Console.WriteLine(x * y);
	}
	public override void Div(int x, int y)
	{
	  Console.WriteLine(x / y);
	}

	public void main()
	{
	 child c = new child();
	 c.Add(10, 20);
	 c.Sub(30, 40);
	 c.Mul(50, 60);
	 c.Div(70, 10);
	 Console.ReadLine()
	 
	}
}

=================================================================
Interface: contains only Abstarct methods(methods with-out Method body).
Note: Every abstract method of an interface should be implemented by the child class of the interface, with out fail(mandatory).

Generally a class inherits from another class to consume the members of it's parent, where as if a class is inheriting from an interface, it is to implement
the members of it's parent.

Note: A class can inherit from a class and interface at a time  

Note:- The default scope, the members of an interface is "public" where as it's "private" in case of a class.

Interface Syntax:

	[<Modifiers>] interface <Name>
	{
		- Abstract member Declaration here
	}

Note:- By default every member of an interface is abstract so we don't required to use abstract modifier explicitly on it.
       like as Abstract class

Example in abstract class: public abstract void Add(int x, int y);

Example in Interface: void Add(int x, int y);

interface ITestInetrface
{
    void Add(int x, int y);
}


we can not declare any fields/variables under an interface.
If required an interface can inherit from another interface.
example:
=======
	interface ITestInterface1
	{
		void Add(int x, int y);
	}
	interface ITestInterface2 : ITestInterface1
	{
		void Sub(int x, int y);
	}

Every member of an interface should be implemented under the child class of the Interface, with-out fail. But while implementing we don't require to use "override" 
modifier just like we have done in case of abstract class. 

Example:

	interface ITestInterface1
	{
		void Add(int x, int y);
	}
	interface ITestInterface2 : ITestInterface1
	{
		void Sub(int x, int y);
	}

	class ImplementationClass : ITestInterface2
	{
		public void Add(int x, int y)
		{
		  Console.writeLine(x + y);
		}
		public void Sub(int x, int y)
		{
		  Console.writeLine(x - y);
		}

	       static void main()
	       {
		ImplementationClass obj = new ImplementationClass();
		obj.Add();
		obj.Sub();
		Console.ReadLine();
	       }
	 
	}

Multiple Inheritance with Interface
------------------------------------
Types of Inheritance
---------------------
- Single
- Multi-level
- Hierarchical
- multiple
- Hybrid

Even if multiple Inheritance is not supported through classes in C#, it is still supported through interfaces

A class can have one and only immediate parent class. where as the same class can have any number of interfaces as it's parent. i.e. multiple inheritance is supported in c# through interfaces.

Example:
========
 interface  Interface1
 {
	void Test();
 }
 interface  Interface2
 {
	void Test();
 }
class MultipleInterfaceTest: Interface1, Interface2
{
	public void Test()
	{
	  Console.WriteLine("Interface method is implemented in child class");
	}
	static void main()
	{
	   MultipleInterfaceTest obj = new MultipleInterfaceTest();
	   obj.Test();
	   Console.WriteReadLine();
	}
}
 

====================================================================
Constructor:
=============
it is a special method present under a class, it is responsible for initializing the variables of that class

the name of a constructor method is exactly the same name of the class in which it was present and more over it's non-value returning method.

Each and every class requires this constructor if we want to create the instance of that class. 

class Test
{
int i; string s; bool b;
}

it is the responsibility of the programmer to define the constructor under his class and if he fails to do so. on behalf of the programmer an implicit constructor
gets defined in that class by the compiler 

class Test
{
int i; string s; bool b;
   public Test()
   {
	i = 0;      // Initializing the variable
	s = null;
	b = false;
   }

}

Implicitly defined constructors are parameter less and these constructors are also know as default constructors.

Implicitly defined constructor are public.

we can also define a constructor under the class and if we define it we can call it as explicit constructor and explicit constructor can be parameter less
or parameterized also.

Implicit constructor example:
=============================

class Program
{
  int i;
  bool b;
  static void main()
   {
     Program p = new Program();
     Console.writeLine("the value of i is: " + p.i);
     Console.writeLine("the value of b is: " + p.b);

     Console.ReadLine();
     
   }
}

output:-
--------
the value of i is: 0
the value of b is: flase


Explicit constructor example:
=============================

class EplicitConDemo
{
  public EplicitConDemo()
   {
	Console.writeLine("constructor is called");
   }
  static void main()
   {
     EplicitConDemo obj1 = new EplicitConDemo();
     EplicitConDemo obj2 = new EplicitConDemo();
     EplicitConDemo obj3 = new EplicitConDemo();

     Console.ReadLine();
     
   }
}

Output:-
---------
constructor is called
constructor is called
constructor is called


Note: How many instances we created that many times the constructor is called.

Types of constructors:
----------------------
1. Default or parameter Less constructor
2. Parameterized constructor
3. Copy constructor
4. static constructor



If a constructor method doesn't take any parameters then we call that as default or parameter less. these constructors can be defind by programmer explicitly 
or else will be defind implicitly there is no explicit constructor under the class.

Example:
---------
class Test
{
  public Test() // implicit constructor
  {
  }
}

If a constructor method is defined with Parameters then we call it as parameterized constructor and these constructors can be defined by the programmer only but 
never can be defined implicitly.

Example:-
--------

class ParameterizedConDemo
{
  int x;
  public ParameterizedConDemo(int i)
  {
	x=i;
	Console.WriteLine("Parameterized Constructor is called:" + i);
  }
  public void Display()
  {
   Console.WriteLine("the value of x is: " + x);
  }
 static void main()
 {
    ParameterizedConDemo pd = new ParameterizedConDemo(10);
    pd.Display();
    Console.ReadLine();	
 }
}

OutPut:
------
Parameterized Constructor is called: 10
the value of x is: 10

Copy Constructor
================

if we want to create multiple instances with the same values then we use these copy constructors, in a copy constructor, the constructor takes the same class 
as a parameter to it


class CopyConDemo
{
  int x;
  public CopyConDemo(int i)
  {
	x=i;
  }
  public CopyConDemo(CopyConDemo obj)
  {
   	x= obj.x;
  }
  public void Display()
  {
	Console.WriteLine("the value of x is:" + x);
  }
 static void main()
 {
    CopyConDemo cd1 = new CopyConDemo(10);
    cd1.Display();
    CopyConDemo cd2 = new CopyConDemo();
    cd2.Display();
    Console.ReadLine();	
 }
}

OutPut:-
-------
the value of x is : 10
the value of x is : 10 



Static Constructor
==================
if a Constructor is explicitly declared by using static modifier then we call that as static Constructor. All the Constructors we have defined till now are
non-static or instance Constructors


Example
-----

class Test
{
  static Test()   // Explicit Constructor, when we compile this class automatically haveing below Implecit Constructor
   {	
   }
   public Test()  // implicit default Constructor
   {
   }
}



if a class contains any static variables then only implicit static Constructors will be present or else we need to define them explicitly where as non-static
Constructors will be implicitly defined in every class(except static class) provided, we did not define them explicitly.

static Constructors are responsible in initializing static variables and these constructors are never called explicitly they are implicitly called and more over
these Constructors are first to execute under any class.

static Constructors can't be parameterized so overloading static Constructors is not possible.

If we define Constructors explicitly with parameters then we get a chance of initializing the fields or variables of the class with a new value every time we are
going to create instance of that class.

when ever we define a class first identify whether if the class variables requires some values to execute and if they are required then define a constructor explicitly
and pass values through that Constructor, so every time the instance of the class is created we get a chance of passing new values.


===============================================================

  class ArmstrongNum
    {
        static void Main()
        {
            int num, temp, sum = 0, rem;
            Console.WriteLine("Enter a number : "); //Take input from the user
            num = Convert.ToInt32(Console.ReadLine());  //Read input
            temp = num;
            while (num > 0)
            {
                rem = num % 10;
                sum = sum + rem * rem * rem;
                num = num / 10;
            }
            if (temp == sum)                 //To check number is armstrong or not
                Console.WriteLine("Armstrong Number");
            else
                Console.WriteLine("Not a Armstrong Number");
            Console.ReadLine();
        }
    }


-----------
Output : 
Enter a number: 153
Armstrong Number.


=======================================================
What is LINQ?
Yes, LINQ is a powerful feature in .NET that allows developers to query collections, databases, XML, and other data sources directly within the programming language.

LINQ first or default?
Ans.	if we have a list of numbers, and need to find one number from the list, then here FIRST or DEFAULT will search from the list whether the number what we are searching from the list is available or not, if the number is available then it will print that number if not the default number is displayed

Q23ii. What is single or first?
Ans.	if we have a list of numbers, and need to find one number from the list, then here SINGLE or FIRST will search from the list, whether the number, what we are searching from the list, is available or not. if the number is available then, it will print that number. if not, we get an error Message. And also, if we have a number twice in the list then also, we get an error.



clusterd index: A Clustered Index sorts and stores the data physically in the table based on the indexed column
syntax: create Clustered Index Index_name  ON  table_name(column_name)
	only one clusterd index is allowed per table
	faster for data retrieval
	automatically creted on primary key by default
non clustered Index: An non-clusterd Index creates a separate structure from the table data, storing pointers to actual rows
	syntax: create index index_name ON table_name(column_name)
	Multiple Non-Clustered Indexes can be created on a table.
	Improves search performance.
	Does not affect the physical order of data.
	Stores pointers to the actual data


Explain the difference between a function and a stored procedure?
	Function:
•	A function is a block of code that returns a single value.
•	It is typically used when you need to perform a calculation or retrieve a value  (like a resul  from a query).
•	You can use a function in SQL expressions (e.g., in a SELECT statement, or as part of  an assignment).
	Stored procedure
•	A Stored Procedure is a group of predefined SQL statements stored in the database that can be executed multiple times.
Example:
	Create procedure  procedure_name
	AS
	BEGIN
		Sql_statements;
	END;

•	Improves code reusability.
•	Increases performance. 
•	Supports input and output parameters.
•	Provides security by hiding SQL code.


