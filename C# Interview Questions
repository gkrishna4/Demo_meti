C# Questions
Sl.No.	Question
1	What is the difference between value types and reference types in C#?
2	What properties in C#?
3	What is the use of  "using" directive in C#?
4	"const"  and "readonly" in C#?
5	Explain the concept of exception handling in C#.
6	What are delegates in C#?
7	Difference between "func" and "action" delegate?
8	What is generics? How to implement generics?
9	Explain the concept of extension methods in C#.
10	Abstract class vs. interface in C#
11	What is polymorphism and how is it achieved in C#?
12	Explain the concept of async and await in C#.
13	What are nullable types in C#?
14	What is reflection in C# and how is it used?
15	"IEnumerable"  and "IQueryable" in C#?
16	How do you implement dependency injection in C#?
17	Types of design patterns used in C#?
18	What is the role of garbage collector in C#?
19	What is the difference between "Task" and "Thread" in C#?
20	Explain the concept of dynamic types in C#.
21	How do you improve performance in a C# application?
22	How do you handle memory leaks in C#?
23	What are the best practices for writing clean and maintainable code in C#?
 
 
.NET Core
 
Sl. No.	Question
1	Features of .Net Core
2	How .Net Core is different from earlier version like .Net 5 and later
3	What is Program.cs?
4	What is the latest version of .Net Core?
5	How do you create a new .NET Core project using CLI?
6	What is appsettings.json?
7	What is dependency injection and how is it implemented in .NET Core?
8	What is middleware and its component?
9	What is routing and how it works in .net core?
10	What is the difference between IServiceCollection and IServiceProvider?
11	How to implement logging?
12	Different lifetimes of services in dependency injection?
13	Different lifetimes of services in dependency injection?
14	How does .NET Core handle memory management and garbage collection?
15	Explain the concept of hosting in .NET Core.
16	What is custom middleware? How to implement custom middleware?
17	How do you secure an ASP.NET Core application (authentication/authorization)?
18	What are minimal APIs in .NET 6+ and how do they differ from MVC?
19	How do you use Entity Framework Core with .NET Core?
20	How to improve performance in .Net core application?
21	How do you write unit tests in .NET Core using xUnit/NUnit?

==================================================================
Q39. What is reflection in C#? and how it is used?
Ans. Reflection inspects the assembly and shows the metadata of that assembly.
Example:
Class program{
             Static void main(string[] args)
             {
                            String obj;
                            obj.
}
}
When you type obj. then visual studio intelligence showing all the methods, properties, fields of that object. This is possible because reflection in c#.
 
Q40. Types of design patterns used in C# ?
Ans.      We have 3 main types of design patterns
Creational
Like Singleton for single-instance objects, Factory for flexible object creation
Structural
Like Adapter for incompatible Interfaces, Decorator for adding features dynamically
Behavioral
Like Observer for event notifications, Strategy for interchangeable algorithms
 
Q41. What is the difference between "Task" and "Thread" in C#?
Ans.
Threads and tasks are two different ways for doing multithreading.
Thread is a general programming concept. On the other hand, Microsoft created Task in .NET to simplify the use of Threads.
Tasks are like a wrapper over Threads.
Tasks internally uses threads only
Q42.How do you create a new .NET Core project using CLI?
             use the dotnet new command to create a new project with template(like webapi for APIs or console for CLI apps)
             Example:
dotnet new webapi -m <project-name>
Q43. What is appsettings.json?
Ans:
The appsettings. json file is an application configuration file used to store configuration settings such as database connections strings etc.
Q44. What is launchSettings. Json?
Ans:
The launchSettings. json file is used to store the configuration information, which is used to start the ASP.NET Core application.
 
Q33.  What is CORS policy and what is the use of it?
Ans. The CORS policy is used to control how web browsers handle requests that come from a different domain, protocol or port from the web application is running on.
Basic CORS Setup in Program.cs file
// Add services to the container.
Builder.Services.AddCors( options =>   {
          Options.AddPolicy(“AllowAll”, policy => {
                  Policy.AllowAnyOrigin()
                             .AllowAnyMethod()
                             .AllowAnyHeader();
});
    });
// configure the http request pipeline
App.UseCors(“AllowAll”);
 
Q19i. What is Program.cs?
Ans:
Program.cs file contains the application startup code. 
The main method of Program.cs file is the entry point of application.
From .NET 6.0, the startup class code is merged in Program.cs file and therefore there is no separate Startup.cs class.
 
 
Q5i. What is custom middleware? How to implement custom middleware?
Ans:
 Custom middleware class is used to separate the middleware logic into a separate reusable class. . and by default the middleware class has to implement an interface called IMiddleware in order to register that, this class is a middleware. and this IMiddleware interface forces us to write invokeAsync() method which will be executed when the request reaches to that particular middleware.
Code Explanation
Let's dissect the code you provided:
// MyCustomMiddleware.cs
namespace MiddlewareExample.CustomMiddleware
{
   public class MyCustomMiddleware : IMiddleware 
   {
       public async Task InvokeAsync(HttpContext context, RequestDelegate next)
       {
           await context.Response.WriteAsync("My Custom Middleware - Starts\n");
           await next(context);
            await context.Response.WriteAsync("My Custom Middleware - Ends\n");
        }
    }
 
    // Extension method for easy registration
    public static class CustomMiddlewareExtension
    {
        public static IApplicationBuilder UseMyCustomMiddleware(this IApplicationBuilder app)
        {
            return app.UseMiddleware<MyCustomMiddleware>();
        }
    }
}
 
Q45. What is routing and how it works in .net core?
Ans:
  Routing is the mechanism to match incoming HTTP requests to specific endpoints (e.g., controller actions, Razor Pages, or minimal API handlers) within your application.
It has two individual methods that is "UseRouting()" and "UseEndPoints()". you would like to invoke them in the same order. that is first "UseRouting()" and after that only "UseEndPoints()".
"UseRouting()" enables routing in your application, and it selects the appropriate endpoint based on the incoming request. it mainly considers the url path, and also http method either get, post or put or delete method.
 
 
Q17.      What is Authentication and Authorization?
Ans.     
Authentication: it checks that whether the user is a valid user or not, if the user is a valid user then he can able to access the application (EX: suppose there is building in that building multiple offices are located. Then entering into the building is Authentication)
Authorization: it checks whether the user is having access to the particular module/resource. (EX : having access to the particular office is authorization).
JWT(JSON Web Token)  is widely used for authentication and authorization purposes because it is stateless, compact, and easy to verify.
A JWT token consists of three parts(Header, Payload, Signature).
Set Expiration Times and Use Short-Lived Tokens
JWTs should have short expiration times (exp claim) to minimize the window of opportunity for attackers.
Set a reasonable token lifespan based on the application's security requirements. Typically, tokens are set to expire within minutes or hours for high-security apps.
Implement Refresh Tokens for Long-Lived Sessions
Instead of making JWTs valid for extended periods, use short-lived tokens with refresh tokens to allow the user to obtain a new JWT without re-authenticating.
Refresh tokens are stored securely on the client side (usually in HTTP-only cookies) and are only exchanged when a new JWT is needed.
Example Flow
------------
User Login:
The client sends login credentials to the server.
The server authenticates the user and, if successful, generates a JWT.
The server sends the token back to the client.
Requesting Protected Resource:
The client includes the JWT in the request header to access a protected endpoint.
The server verifies the JWT and, if valid, allows acce
