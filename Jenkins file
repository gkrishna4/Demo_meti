pipeline {
    agent {
        node {
            // Any Streaming 11.x and node compatible linux.
            label "((o.almalinux8 || o.rh8)) && c.docker-compatible-linux-3.10 && c.aws-cli-2 && c.docker-multi-stage-build && c.docker-20-compatible && q.str"
        }
    }
    
    options {
        buildDiscarder(logRotator(daysToKeepStr: '7', numToKeepStr: '3'))
        timeout(time: 3, unit: 'HOURS')
        skipDefaultCheckout()
    }

    triggers {
        pollSCM('H 7,14,20 * * 1-5')
    }
    
    parameters {
        choice(
            name: 'deployArtifacts',
            choices: ['default', 'never', 'always'],
            description: 'By default, only main and release-work branches are deployed. Some deployments can be skipped if there are no changes in the default case.'
        )

        string(
            name: 'mavenExtras',
            defaultValue: '',
            description: 'Extra JVM options for Maven, usually -DskipTests and the like.'
        )

        booleanParam(
            name: 'cleanWorkspace',
            defaultValue: true,
            description: 'Clean workspace before build.'
        )

        string(
            name: 'notificationEmail',
            defaultValue: 'when:team:tcds-dev@tibco.com change-authors',
            description: 'Email addresses for notifications on failure.'
        )

        string(
            name: 'successEmail',
            defaultValue: 'when:release:tcds-dev@tibco.com when:release:sbase-release@tibco.com change-authors',
            description: 'Email addresses for notifications on success.'
        )

        choice(
            name: 'buildVerbose',
            choices: ['default', 'pipeline', 'tools'],
            description: 'Make build more verbose with pipeline and tool diagnostics.'
        )

        string(
            name: 'buildLabel',
            defaultValue: '',
            description: 'Jenkins build label override.'
        )
    }
    
    environment {
        // Define environment variables if needed
        SONARQUBE_URL = 'http://sonarqube-server:9000'
        MAVEN_HOME = tool 'Maven'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build') {
            steps {
                script {
                    def mavenHome = tool 'Maven'
                    def mavenCMD = "${mavenHome}/bin/mvn"
                    sh "${mavenCMD} clean install ${params.mavenExtras}"
                }
            }
        }
        
        stage('Code Quality Analysis') {
            steps {
                script {
                    withSonarQubeEnv('SonarQube Server') {
                        sh "mvn sonar:sonar -Dsonar.host.url=${env.SONARQUBE_URL}"
                    }
                }
            }
        }
    }
    
    post {
        always {
            junit '**/target/surefire-reports/TEST-*.xml'
            archiveArtifacts 'target/*.jar'
        }
        
        success {
            script {
                emailext (
                    subject: "Build Success: ${env.JOB_NAME} - ${env.BUILD_NUMBER}",
                    body: "Build successful! No issues found.",
                    to: "${params.successEmail}",
                    mimeType: 'text/html'
                )
            }
        }
        
        failure {
            script {
                emailext (
                    subject: "Build Failure: ${env.JOB_NAME} - ${env.BUILD_NUMBER}",
                    body: "Build failed! Please check the build logs for details.",
                    to: "${params.notificationEmail}",
                    mimeType: 'text/html'
                )
            }
        }
    }
}



Dockerfile

FROM ubuntu:20.04

RUN apt-get -y update
RUN useradd -d /home/jenkins -u 1001 -m -s /bin/bash jenkins
RUN apt-get -y update && apt-get install -y unzip wget curl net-tools git vim xz-utils docker.io
RUN apt-get -y update && DEBIAN_FRONTEND=noninteractive apt-get install -y openjdk-11-jdk
#ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime
#RUN mkdir -p /var/lib
RUN wget https://services.gradle.org/distributions/gradle-6.9-bin.zip -O /opt/gradle.zip
RUN (cd /opt && unzip gradle.zip)
USER jenkins
ENV JAVA_HOME /usr/lib/jvm/java-11-openjdk-amd64
ENV PATH /usr/local/bin:/usr/bin:/bin:/opt/gradle-6.9/bin
WORKDIR /home/jenkins
